From 3098a00860d4d86cffd32b7f4dbca341b01a5d5b Mon Sep 17 00:00:00 2001
From: Henry Beberman <hebeberm@microsoft.com>
Date: Thu, 16 Sep 2021 16:09:57 +0300
Subject: [PATCH 037/233] [FIO fromlist] spl: Add
 CONFIG_SPL_FIT_SIGNATURE_STRICT

SPL FIT load checks the signature on loadable images but just continues
in the case of a failure. This is undesirable behavior because the boot
process depends on the authenticity of each loadable part.

Adding CONFIG_SPL_FIT_SIGNATURE_STRICT to halt the platform when any
image fails its signature check, including loadable parts.

SPL already supports image signature verification but had no mechanism
to check that the FIT's configuration block was signed correctly.

Add a check near the start of spl_load_simple_fit that verifies the
FIT's configuration block, and fails if it's not present or the
signature doesn't match what's stored in the SPL DTB.

Signed-off-by: Henry Beberman <hebeberm@microsoft.com>
Co-developed-by: Ricardo Salveti <ricardo@foundries.io>
Signed-off-by: Ricardo Salveti <ricardo@foundries.io>
Co-developed-by: Oleksandr Suvorov <oleksandr.suvorov@foundries.io>
Signed-off-by: Oleksandr Suvorov <oleksandr.suvorov@foundries.io>
---
 boot/Kconfig         |  7 +++++++
 common/spl/spl_fit.c | 21 +++++++++++++++++----
 2 files changed, 24 insertions(+), 4 deletions(-)

diff --git a/boot/Kconfig b/boot/Kconfig
index b83a4e84000..2722a27ffdf 100644
--- a/boot/Kconfig
+++ b/boot/Kconfig
@@ -193,6 +193,13 @@ config SPL_FIT_RSASSA_PSS
 	  Enable this to support the pss padding algorithm as described
 	  in the rfc8017 (https://tools.ietf.org/html/rfc8017) in SPL.
 
+config SPL_FIT_SIGNATURE_STRICT
+	bool "Halt if loadables or firmware don't pass FIT signature verification"
+	select SPL_FIT_SIGNATURE
+	help
+	  Strictly requires each loadable or firmware in a FIT image to be
+	  passed verification. Halt if any loadable fails to be verified.
+
 config SPL_LOAD_FIT
 	bool "Enable SPL loading U-Boot as a FIT (basic fitImage features)"
 	select SPL_FIT
diff --git a/common/spl/spl_fit.c b/common/spl/spl_fit.c
index 9d5a6dccec2..3f2ef4f6297 100644
--- a/common/spl/spl_fit.c
+++ b/common/spl/spl_fit.c
@@ -8,6 +8,7 @@
 #include <errno.h>
 #include <fpga.h>
 #include <gzip.h>
+#include <hang.h>
 #include <image.h>
 #include <log.h>
 #include <malloc.h>
@@ -350,8 +351,14 @@ static int spl_load_fit_image(struct spl_load_info *info, ulong sector,
 		printf("## Checking hash(es) for Image %s ... ",
 		       fit_get_name(fit, node, NULL));
 		if (!fit_image_verify_with_data(fit, node, gd_fdt_blob(), src,
-						length))
-			return -EPERM;
+						length)) {
+			if (CONFIG_IS_ENABLED(FIT_SIGNATURE_STRICT)) {
+				puts("Invalid FIT signature found in a required image.\n");
+				hang();
+			} else {
+				return -EPERM;
+			}
+		}
 		puts("OK\n");
 	}
 
@@ -738,8 +745,14 @@ int spl_load_simple_fit(struct spl_image_info *spl_image,
 	ctx.fit = spl_load_simple_fit_fix_load(ctx.fit);
 
 	ret = spl_simple_fit_parse(&ctx);
-	if (ret < 0)
-		return ret;
+	if (ret < 0) {
+		if (CONFIG_IS_ENABLED(FIT_SIGNATURE_STRICT)) {
+			puts("SPL_FIT_SIGNATURE_STRICT needs a valid config node in FIT\n");
+			hang();
+		} else {
+			return ret;
+		}
+	}
 
 #ifdef CONFIG_IMX_TRUSTY_OS
 	int rbindex;
-- 
2.25.1

